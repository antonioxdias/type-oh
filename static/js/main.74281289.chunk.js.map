{"version":3,"sources":["components/index.ts","components/Title.tsx","components/Typer.tsx","lib/useWords.tsx","App.tsx","index.tsx"],"names":["Title","style","margin","Typer","typedText","setTypedText","testText","inputRef","useRef","useState","isFocused","setIsFocused","onClick","current","focus","maxWidth","fontSize","textAlign","wordSpacing","split","map","char","index","state","charCodeAt","charState","color","charColor","isNaySpace","isSpaceChar","isLastTypedChar","length","isTypedEmpty","borderStyle","borderLeft","borderRight","borderRadius","key","backgroundColor","ref","onChange","ev","target","value","onFocus","onBlur","position","top","left","useWords","amount","request","onRequestComplete","words","setWords","useEffect","fetch","then","response","json","data","catch","e","console","log","App","requestWords","setRequestWords","requestCompleted","display","flexDirection","alignItems","height","join","ReactDOM","render","document","getElementById"],"mappings":"+LAGO,IAAMA,ECDQ,kBACnB,wBACEC,MAAO,CACLC,OAAQ,SAFZ,YDCWC,EEIN,YAIH,IAJoBC,EAIrB,EAJqBA,UAAWC,EAIhC,EAJgCA,aAAcC,EAI9C,EAJ8CA,SAKzCC,EAAWC,iBAAgC,MADhD,EAEiCC,oBAAS,GAF1C,mBAEMC,EAFN,KAEiBC,EAFjB,KA6BD,OACE,kBAAC,WAAD,KACE,yBACEC,QA5Ba,WACbL,GAAYA,EAASM,SAASN,EAASM,QAAQC,SA4B/Cb,MAAO,CACLc,SAAU,IACVC,SAAU,qBACVC,UAAW,SACXC,YAAa,YAGdZ,EAASa,MAAM,IAAIC,KAAI,SAACC,EAAcC,GACrC,IAAMC,EAjCI,SAACD,GACjB,OAAIlB,EAAUkB,GACClB,EAAUoB,WAAWF,KAAWhB,EAASkB,WAAWF,GACnD,MAAQ,MAEjB,QA4BaG,CAAUH,GAClBI,EAxBI,SAACH,GACjB,OAAQA,GACN,IAAK,MACH,MA7BS,UA8BX,IAAK,MACH,MA9BS,UA+BX,QACE,MA/BW,WAgDKI,CAAUJ,GAClBK,EA3BM,SAACP,GAAD,OAAyC,KAAvBA,EAAKG,WAAW,GA2B3BK,CAAYR,IAAmB,QAAVE,EAClCO,EAAkBR,IAAUlB,EAAU2B,OAAS,EAC/CC,EAAoC,IAArB5B,EAAU2B,OAEzBE,EAAcvB,EAAY,CAC9BwB,WAAYF,GAA0B,IAAVV,EAAhB,oBAxDP,WAwD+D,OACpEa,YAAY,aAAD,OAAeL,IAAoBE,EAzDzC,UAyDmE,WACxEI,aAAcN,GAAmBE,EAAe,EAAI,GAClD,CACFG,YAAa,wBACbD,WAAYF,GAA0B,IAAVV,EAAhB,wBAAwD,OACpEc,aAAc,GAGhB,OACE,0BACEC,IAAKf,EACLrB,MAAK,aACHyB,QACAY,gBAAiBV,EArEhB,UAqEwC,eACtCK,IAGJZ,OAKT,2BACEkB,IAAKhC,EACLiC,SAAU,SAACC,GAAD,OAAQpC,EAAaoC,EAAGC,OAAOC,QACzCC,QAAS,kBAAMjC,GAAa,IAC5BkC,OAAQ,kBAAMlC,GAAa,IAC3BV,MAAO,CACL6C,SAAU,WACVC,IAAK,YACLC,KAAM,iBCnEDC,EAtBE,SAACC,EAAgBC,EAAkBC,GAAmC,IAAD,EAC1D3C,mBAAmB,IADuC,mBAC7E4C,EAD6E,KACtEC,EADsE,KAmBpF,OAhBAC,qBAAU,WACJJ,GACFK,MAAM,qDAAD,OAAsDN,IACxDO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJN,EAASM,GACTR,OAEDS,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZR,EAAS,2BAA2BnC,MAAM,MAC1CiC,SAGL,CAACF,EAAQC,IAELE,GCcMY,MA/Bf,WAAgB,IAAD,EACqBxD,mBAAS,IAD9B,mBACNL,EADM,KACKC,EADL,OAE2BI,oBAAS,GAFpC,mBAENyD,EAFM,KAEQC,EAFR,KAIPC,EAAmB,kBAAMD,GAAgB,IACzCd,EAAQJ,EAAS,GAAIiB,EAAcE,GAGzC,OAFAb,qBAAU,kBAAMa,IAAkB,IAGhC,kBAAC,WAAD,KACE,0BACEnE,MAAO,CACLoE,QAAS,OACTC,cAAe,SACfC,WAAY,SACZjC,gBAAiB,UACjBkC,OAAQ,QACR9C,MAAO,UAGT,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEtB,UAAWA,EACXC,aAAcA,EACdC,SAAU+C,EAAMoB,KAAK,UCvB/BC,IAASC,OACN,kBAAC,EAAD,MACDC,SAASC,eAAe,U","file":"static/js/main.74281289.chunk.js","sourcesContent":["import { Title as TitleImport } from './Title'\nimport { Typer as TyperImport } from './Typer'\n\nexport const Title = TitleImport\nexport const Typer = TyperImport\n","import React from 'react'\n\nexport const Title = () => (\n  <h1\n    style={{\n      margin: '4rem'\n    }}\n  >\n    Type-OH\n  </h1>\n)\n","import React, { useRef, useState, Fragment } from 'react'\n\ntype CharState = 'yay' | 'nay' | 'empty'\n\nconst yayColor = '#c7b798'\nconst nayColor = '#f56c42'\nconst emptyColor = '#808080'\n\nexport function Typer({ typedText, setTypedText, testText }: {\n  typedText: string\n  setTypedText: (value: string) => void\n  testText: string\n}) {\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const [isFocused, setIsFocused] = useState(false)\n\n  const focusInput = () => {\n    if (inputRef && inputRef.current) inputRef.current.focus()\n  }\n\n  const charState = (index: number): CharState => {\n    if (typedText[index]) {\n      const isEq = typedText.charCodeAt(index) === testText.charCodeAt(index)\n      return isEq ? 'yay' : 'nay'\n    }\n    return 'empty'\n  }\n\n  const isSpaceChar = (char: string) => char.charCodeAt(0) === 32\n\n  const charColor = (state: CharState) => {\n    switch (state) {\n      case 'yay':\n        return yayColor\n      case 'nay':\n        return nayColor\n      default:\n        return emptyColor\n    }\n  }\n\n  return (\n    <Fragment>\n      <div\n        onClick={focusInput}\n        style={{\n          maxWidth: 720,\n          fontSize: 'calc(10px + 2vmin)',\n          textAlign: 'center',\n          wordSpacing: '0.25rem'\n        }}\n      >\n        {testText.split('').map((char: string, index: number) => {\n          const state = charState(index)\n          const color = charColor(state)\n          const isNaySpace = isSpaceChar(char) && state === 'nay'\n          const isLastTypedChar = index === typedText.length - 1\n          const isTypedEmpty = typedText.length === 0\n\n          const borderStyle = isFocused ? {\n            borderLeft: isTypedEmpty && index === 0 ? `solid 2px ${yayColor}` : 'none',\n            borderRight: `solid 2px ${isLastTypedChar && !isTypedEmpty ? yayColor : '#282d33'}`,\n            borderRadius: isLastTypedChar || isTypedEmpty ? 0 : 8\n          } : {\n            borderRight: 'solid 2px transparent',\n            borderLeft: isTypedEmpty && index === 0 ? `solid 2px transparent` : 'none',\n            borderRadius: 8\n          }\n\n          return (\n            <span\n              key={index}\n              style={{\n                color,\n                backgroundColor: isNaySpace ? nayColor : 'transparent',\n                ...borderStyle\n              }}\n            >\n              {char}\n            </span>\n          )\n        })}\n      </div>\n      <input\n        ref={inputRef}\n        onChange={(ev) => setTypedText(ev.target.value)}\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => setIsFocused(false)}\n        style={{\n          position: 'absolute',\n          top: '-999999px',\n          left: '-999999px'\n        }}\n      />\n    </Fragment>\n  )\n}\n","import { useState, useEffect } from 'react'\n\nconst useWords = (amount: number, request: boolean, onRequestComplete: () => void) => {\n  const [words, setWords] = useState<string[]>([])\n\n  useEffect(() => {\n    if (request) {\n      fetch(`https://random-word-api.herokuapp.com/word?number=${amount}`)\n        .then(response => response.json())\n        .then(data => {\n          setWords(data)\n          onRequestComplete()\n        })\n        .catch(e => {\n          console.log(e)\n          setWords('failed to retreive words'.split(' '))\n          onRequestComplete()\n        })\n    }\n  }, [amount, request])\n\n  return words\n}\n\nexport default useWords\n\n","import React, { useState, Fragment, useEffect } from 'react'\nimport { Title, Typer } from './components'\nimport useWords from './lib/useWords'\n\nfunction App() {\n  const [typedText, setTypedText] = useState('')\n  const [requestWords, setRequestWords] = useState(true)\n\n  const requestCompleted = () => setRequestWords(false)\n  const words = useWords(25, requestWords, requestCompleted)\n  useEffect(() => requestCompleted, [])\n\n  return (\n    <Fragment>\n      <main\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          backgroundColor: '#282d33',\n          height: '100vh',\n          color: 'white'\n        }}\n      >\n        <Title />\n        <Typer\n          typedText={typedText}\n          setTypedText={setTypedText}\n          testText={words.join(' ')}\n        />\n      </main>\n    </Fragment>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  (<App />),\n  document.getElementById('root')\n)\n\n\n"],"sourceRoot":""}