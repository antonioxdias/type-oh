{"version":3,"sources":["components/Typer.tsx","lib/utils.ts","components/index.ts","components/Title.tsx","lib/useWords.tsx","App.tsx","index.tsx"],"names":["charState","typedText","testText","index","charCodeAt","isSpaceChar","char","charColor","state","Title","style","margin","Typer","onFinish","inputRef","useRef","useState","setTypedText","isFocused","setIsFocused","useEffect","length","onClick","current","focus","position","maxWidth","fontSize","textAlign","wordSpacing","split","map","color","isNaySpace","isLastTypedChar","isTypedEmpty","borderStyle","borderLeft","borderRight","borderRadius","key","backgroundColor","top","left","width","height","display","placeItems","opacity","verticalAlign","cursor","ref","value","onChange","ev","target","onFocus","onBlur","useWords","amount","words","setWords","a","fetch","then","response","json","data","catch","e","console","log","fetchWords","App","resultText","setResultText","flexDirection","alignItems","join","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f9a217c.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect, Fragment } from 'react'\nimport { backgroundColor, yayColor, nayColor, emptyColor } from '../lib/utils'\n\ntype CharState = 'yay' | 'nay' | 'empty'\n\nexport function Typer({ testText, onFinish }: {\n  testText: string\n  onFinish: (typedText: string) => void\n}) {\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const [typedText, setTypedText] = useState('')\n  const [isFocused, setIsFocused] = useState(false)\n\n  useEffect(() => {\n    if (typedText.length === testText.length) {\n      onFinish(typedText)\n    }\n  }, [typedText, testText, onFinish])\n\n  useEffect(() => setTypedText(''), [testText])\n\n  const focusInput = () => {\n    if (inputRef && inputRef.current) inputRef.current.focus()\n  }\n\n  if (!testText) return null\n\n  return (\n    <Fragment>\n      <div\n        onClick={focusInput}\n        style={{\n          position: 'relative',\n          maxWidth: 720,\n          fontSize: 'calc(10px + 2vmin)',\n          textAlign: 'center',\n          wordSpacing: '0.25rem'\n        }}\n      >\n        {testText.split('').map((char: string, index: number) => {\n          const state = charState(typedText, testText, index)\n          const color = charColor(state)\n          const isNaySpace = isSpaceChar(char) && state === 'nay'\n          const isLastTypedChar = index === typedText.length - 1\n          const isTypedEmpty = typedText.length === 0\n\n          const borderStyle = isFocused ? {\n            borderLeft: isTypedEmpty && index === 0 ? `solid 2px ${yayColor}` : 'none',\n            borderRight: `solid 2px ${isLastTypedChar && !isTypedEmpty ? yayColor : '#282d33'}`,\n            borderRadius: isLastTypedChar || isTypedEmpty ? 0 : 8\n          } : {\n            borderRight: 'solid 2px transparent',\n            borderLeft: isTypedEmpty && index === 0 ? `solid 2px transparent` : 'none',\n            borderRadius: 8\n          }\n\n          return (\n            <span\n              key={index}\n              style={{\n                color,\n                backgroundColor: isNaySpace ? nayColor : 'transparent',\n                ...borderStyle\n              }}\n            >\n              {char}\n            </span>\n          )\n        })}\n        {\n          !isFocused && (\n            <div\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                display: 'grid',\n                placeItems: 'center',\n                backgroundColor,\n                opacity: 0.8,\n                verticalAlign: 'center',\n                cursor: 'pointer'\n              }}\n            >\n              Click here to start typing!\n            </div>\n          )\n        }\n      </div>\n      <input\n        ref={inputRef}\n        value={typedText}\n        onChange={(ev) => setTypedText(ev.target.value)}\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => setIsFocused(false)}\n        style={{\n          position: 'absolute',\n          top: '-999999px',\n          left: '-999999px'\n        }}\n      />\n    </Fragment>\n  )\n}\n\nconst charState = (typedText: string, testText: string, index: number): CharState => {\n  if (typedText[index]) {\n    const isEq = typedText.charCodeAt(index) === testText.charCodeAt(index)\n    return isEq ? 'yay' : 'nay'\n  }\n  return 'empty'\n}\n\nconst isSpaceChar = (char: string) => char.charCodeAt(0) === 32\n\nconst charColor = (state: CharState) => {\n  switch (state) {\n    case 'yay':\n      return yayColor\n    case 'nay':\n      return nayColor\n    default:\n      return emptyColor\n  }\n}\n","export const backgroundColor = '#282d33'\nexport const yayColor = '#c7b798'\nexport const nayColor = '#f56c42'\nexport const emptyColor = '#808080'","import { Title as TitleImport } from './Title'\nimport { Typer as TyperImport } from './Typer'\n\nexport const Title = TitleImport\nexport const Typer = TyperImport\n","import React from 'react'\n\nexport const Title = () => (\n  <h1\n    style={{\n      margin: '4rem'\n    }}\n  >\n    Type-OH\n  </h1>\n)\n","import { useState, useEffect } from 'react'\n\nconst useWords = (amount: number, typedText: string) => {\n  const [words, setWords] = useState<string[]>([])\n\n  useEffect(() => {\n    const fetchWords = async () => {\n      await fetch(`https://random-word-api.herokuapp.com/word?number=${amount}`)\n        .then(response => response.json())\n        .then(data => {\n          setWords(data)\n        })\n        .catch(e => {\n          console.log(e)\n          setWords('failed to retreive words'.split(' '))\n        })\n    }\n\n    fetchWords()\n  }, [amount, typedText])\n\n  return words\n}\n\nexport default useWords\n\n","import React, { useState, Fragment } from 'react'\nimport { Title, Typer } from './components'\nimport useWords from './lib/useWords'\nimport { backgroundColor } from './lib/utils'\n\nfunction App() {\n  const [resultText, setResultText] = useState('')\n  const words = useWords(15, resultText)\n\n  return (\n    <Fragment>\n      <main\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          backgroundColor,\n          height: '100vh',\n          color: 'white'\n        }}\n      >\n        <Title />\n        <Typer\n          testText={words.join(' ')}\n          onFinish={typedText => setResultText(typedText)}\n        />\n      </main>\n    </Fragment>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  (<App />),\n  document.getElementById('root')\n)\n\n\n"],"sourceRoot":""}