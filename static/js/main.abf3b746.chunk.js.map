{"version":3,"sources":["components/Typer.tsx","lib/utils.ts","components/index.ts","components/Title.tsx","lib/useWords.tsx","App.tsx","index.tsx"],"names":["charState","typedText","testText","index","charCodeAt","isSpaceChar","char","charColor","state","Title","style","margin","Typer","isRunning","onStart","onFinish","latestWPM","inputRef","useRef","useState","setTypedText","isFocused","setIsFocused","useEffect","length","blurInput","focusOnEnterDown","ev","keyCode","focusInput","document","addEventListener","removeEventListener","current","focus","blur","onClick","position","maxWidth","fontSize","textAlign","wordSpacing","split","map","color","isNaySpace","isLastTypedChar","isTypedEmpty","borderStyle","borderLeft","borderRight","borderRadius","key","backgroundColor","top","left","width","height","display","placeItems","opacity","verticalAlign","cursor","pointerEvents","ref","value","onChange","target","onFocus","onBlur","charsDictionary","useWords","amount","testMode","words","setWords","a","fetch","then","response","json","data","catch","e","console","log","fetchWords","chars","w","word","i","Math","floor","random","push","generateChars","join","App","mode","setIsRunning","startTime","setStartTime","wpm","setWPM","calcWPM","endTime","round","flexDirection","alignItems","Date","now","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.abf3b746.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect, Fragment } from 'react'\nimport { CharState } from '../lib/types'\nimport { backgroundColor, yayColor, nayColor, emptyColor } from '../lib/utils'\n\nexport function Typer({ testText, isRunning, onStart, onFinish, latestWPM }: {\n  testText: string\n  isRunning: boolean\n  onStart: () => void\n  onFinish: (typedText: string) => void\n  latestWPM: number | null\n}) {\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const [typedText, setTypedText] = useState('')\n  const [isFocused, setIsFocused] = useState(false)\n\n  useEffect(() => {\n    if (testText === '') return\n    if (typedText.length === testText.length && isRunning) {\n      onFinish(typedText)\n      blurInput()\n    }\n  }, [typedText, testText, isRunning, onFinish])\n\n  useEffect(() => setTypedText(''), [testText])\n\n  useEffect(() => {\n    const focusOnEnterDown = (ev: KeyboardEvent) => {\n      if (ev.keyCode === 13 && !isFocused) focusInput()\n    }\n    document.addEventListener('keydown', focusOnEnterDown)\n    return () => {\n      document.removeEventListener('keydown', focusOnEnterDown)\n    }\n  }, [])\n\n  const focusInput = () => {\n    if (inputRef && inputRef.current) inputRef.current.focus()\n  }\n\n  const blurInput = () => {\n    if (inputRef && inputRef.current) inputRef.current.blur()\n  }\n  \n  const onInputChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    if (!isRunning) onStart()\n    setTypedText(ev.target.value)\n  }\n\n  if (!testText) return null\n\n  return (\n    <Fragment>\n      <div\n        onClick={focusInput}\n        style={{\n          position: 'relative',\n          maxWidth: 720,\n          fontSize: 'calc(10px + 2vmin)',\n          textAlign: 'center',\n          wordSpacing: '0.25rem'\n        }}\n      >\n        {testText.split('').map((char: string, index: number) => {\n          const state = charState(typedText, testText, index)\n          const color = charColor(state)\n          const isNaySpace = isSpaceChar(char) && state === 'nay'\n          const isLastTypedChar = index === typedText.length - 1\n          const isTypedEmpty = typedText.length === 0\n\n          const borderStyle = isFocused ? {\n            borderLeft: isTypedEmpty && index === 0 ? `solid 2px ${yayColor}` : 'none',\n            borderRight: `solid 2px ${isLastTypedChar && !isTypedEmpty ? yayColor : '#282d33'}`,\n            borderRadius: isLastTypedChar || isTypedEmpty ? 0 : 8\n          } : {\n            borderRight: 'solid 2px transparent',\n            borderLeft: isTypedEmpty && index === 0 ? `solid 2px transparent` : 'none',\n            borderRadius: 8\n          }\n\n          return (\n            <span\n              key={index}\n              style={{\n                color,\n                backgroundColor: isNaySpace ? nayColor : 'transparent',\n                ...borderStyle\n              }}\n            >\n              {char}\n            </span>\n          )\n        })}\n        {\n          !isFocused && (\n            <div\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                display: 'grid',\n                placeItems: 'center',\n                backgroundColor,\n                opacity: 0.8,\n                verticalAlign: 'center',\n                cursor: 'pointer'\n              }}\n            >\n              Click here to start typing! (or press Enter)\n            </div>\n          )\n        }\n        {\n          !isFocused && latestWPM && (\n            <div\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                display: 'grid',\n                placeItems: 'center',\n                backgroundColor,\n                color: yayColor,\n                fontSize: 24,\n                pointerEvents: 'none' \n              }}\n            >\n              {latestWPM}\n            </div>\n          )\n        }\n      </div>\n      <input\n        ref={inputRef}\n        value={typedText}\n        onChange={onInputChange}\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => setIsFocused(false)}\n        style={{\n          position: 'absolute',\n          top: '-999999px',\n          left: '-999999px'\n        }}\n      />\n    </Fragment>\n  )\n}\n\nconst charState = (typedText: string, testText: string, index: number): CharState => {\n  if (typedText[index]) {\n    const isEq = typedText.charCodeAt(index) === testText.charCodeAt(index)\n    return isEq ? 'yay' : 'nay'\n  }\n  return 'empty'\n}\n\nconst isSpaceChar = (char: string) => char.charCodeAt(0) === 32\n\nconst charColor = (state: CharState) => {\n  switch (state) {\n    case 'yay':\n      return yayColor\n    case 'nay':\n      return nayColor\n    default:\n      return emptyColor\n  }\n}\n","export const backgroundColor = '#282d33'\nexport const yayColor = '#c7b798'\nexport const nayColor = '#f56c42'\nexport const emptyColor = '#808080'","import { Title as TitleImport } from './Title'\nimport { Typer as TyperImport } from './Typer'\n\nexport const Title = TitleImport\nexport const Typer = TyperImport\n","import React from 'react'\n\nexport const Title = () => (\n  <h1\n    style={{\n      margin: '4rem'\n    }}\n  >\n    Type-OH\n  </h1>\n)\n","import { useState, useEffect } from 'react'\nimport { TestMode } from '../lib/types'\n\nconst charsDictionary = 'qwertyuiopasdfghjkl;zxcvbnm,.-QWERTYUIOPASDFGHJKL:ZXCVBNM<>_()|!@#$%&/\\'\"*{}[]^~`]\\\\?=+1234567890'\nconst charWordLength = 5\n\nconst generateChars = (amount: number) => {\n  let chars: string[] = []\n\n  for (let w = 0; w < amount; w++) {\n    let word = ''\n    for (let i = 0; i < charWordLength; i++) {\n      const index = Math.floor(Math.random() * charsDictionary.length)\n      word += charsDictionary[index]\n    }\n    chars.push(word)\n  }\n\n  return chars\n}\n\nconst useWords = (amount: number, testMode: TestMode, isRunning: boolean) => {\n  const [words, setWords] = useState<string[]>([])\n\n  useEffect(() => {\n    const fetchWords = async () => {\n      await fetch(`https://random-word-api.herokuapp.com/word?number=${amount}`)\n        .then(response => response.json())\n        .then(data => {\n          setWords(data)\n        })\n        .catch(e => {\n          console.log(e)\n          setWords('failed to retreive words'.split(' '))\n        })\n    }\n\n    if (!isRunning) {\n      if (testMode === 'words' && !isRunning) fetchWords()\n\n      if (testMode === 'chars' && !isRunning) {\n        setWords(generateChars(amount))\n      }\n    }\n\n  }, [amount, testMode, isRunning])\n\n  return words.join(' ')\n}\n\nexport default useWords\n\n","import React, { useState, Fragment } from 'react'\nimport { Title, Typer } from './components'\nimport { TestMode } from './lib/types'\nimport useWords from './lib/useWords'\nimport { backgroundColor } from './lib/utils'\n\nconst wordCount = 15\n\nfunction App() {\n  const [mode, setMode] = useState<TestMode>('chars')\n  const [isRunning, setIsRunning] = useState(false)\n  const [startTime, setStartTime] = useState<number | null>(null)\n  const [wpm, setWPM] = useState<number | null>(null)\n  const words = useWords(wordCount, mode, isRunning)\n\n  const onRunStart = () => {\n    setIsRunning(true)\n    setStartTime(Date.now())\n  }\n\n  const onRunFinish = (typedText: string) => {\n    console.log(typedText)\n    setIsRunning(false)\n    setWPM(calcWPM(Date.now()))\n    setStartTime(null)\n  }\n\n  const calcWPM = (endTime: number): number => {\n    if (!startTime) return 0\n    return Math.round(wordCount / ((endTime - startTime) / 60000))\n  }\n\n  return (\n    <Fragment>\n      <main\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          backgroundColor,\n          height: '100vh',\n          color: 'white'\n        }}\n      >\n        <Title />\n        <Typer\n          testText={words}\n          isRunning={isRunning}\n          onStart={onRunStart}\n          onFinish={onRunFinish}\n          latestWPM={wpm}\n        />\n      </main>\n    </Fragment>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  (<App />),\n  document.getElementById('root')\n)\n\n\n"],"sourceRoot":""}