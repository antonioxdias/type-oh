{"version":3,"sources":["components/Typer.tsx","App.tsx","index.tsx"],"names":["dummyTestText","Typer","inputRef","useRef","useState","typedText","setTypedText","isFocused","setIsFocused","onClick","current","focus","style","maxWidth","fontSize","fontFamily","textAlign","wordSpacing","letterSpacing","split","map","char","index","state","charCodeAt","charState","color","charColor","isNaySpace","isSpaceChar","isLastTypedChar","length","isTypedEmpty","borderStyle","borderLeft","borderRight","borderRadius","key","backgroundColor","ref","onChange","ev","target","value","onFocus","onBlur","position","top","left","App","display","placeItems","height","ReactDOM","render","document","getElementById"],"mappings":"+LAEMA,EAAgB,yLAgGPC,MAxFf,WACE,IAAMC,EAAWC,iBAAgC,MADlC,EAEmBC,mBAAS,IAF5B,mBAERC,EAFQ,KAEGC,EAFH,OAGmBF,oBAAS,GAH5B,mBAGRG,EAHQ,KAGGC,EAHH,KA8Bf,OACE,kBAAC,WAAD,KACE,yBACEC,QA5Ba,WACbP,GAAYA,EAASQ,SAASR,EAASQ,QAAQC,SA4B/CC,MAAO,CACLC,SAAU,IACVC,SAAU,qBACVC,WAAY,uBACZC,UAAW,SACXC,YAAa,UACbC,cAAe,aAGhBlB,EAAcmB,MAAM,IAAIC,KAAI,SAACC,EAAcC,GAC1C,IAAMC,EAnCI,SAACD,GACjB,OAAIjB,EAAUiB,GACCjB,EAAUmB,WAAWF,KAAWtB,EAAcwB,WAAWF,GACxD,MAAQ,MAEjB,QA8BaG,CAAUH,GAClBI,EA1BI,SAACH,GACjB,OAAQA,GACN,IAAK,MACH,MA1BS,UA2BX,IAAK,MACH,MA3BS,UA4BX,QACE,MA5BW,WA+CKI,CAAUJ,GAClBK,EA7BM,SAACP,GAAD,OAAyC,KAAvBA,EAAKG,WAAW,GA6B3BK,CAAYR,IAAmB,QAAVE,EAClCO,EAAkBR,IAAUjB,EAAU0B,OAAS,EAC/CC,EAAoC,IAArB3B,EAAU0B,OAEzBE,EAAc1B,EAAY,CAC9B2B,WAAW,aAAD,OAAeF,GAA0B,IAAVV,EAvDpC,UAuD6D,eAClEa,YAAY,aAAD,OAAeL,IAAoBE,EAxDzC,UAwDmE,eACxEI,aAAcN,GAAmBE,EAAe,EAAI,GAClD,CACFE,WAAY,wBACZC,YAAa,yBAGf,OACE,0BACEE,IAAKf,EACLV,MAAK,aACHc,QACAY,gBAAiBV,EAnEhB,UAmEwC,eACtCK,IAGJZ,OAKT,2BACEkB,IAAKrC,EACLsC,SAAU,SAACC,GAAD,OAAQnC,EAAamC,EAAGC,OAAOC,QACzCC,QAAS,kBAAMpC,GAAa,IAC5BqC,OAAQ,kBAAMrC,GAAa,IAC3BI,MAAO,CACLkC,SAAU,WACVC,IAAK,YACLC,KAAM,iBCxEDC,MAhBf,WACE,OACE,0BACErC,MAAO,CACLsC,QAAS,OACTC,WAAY,SACZb,gBAAiB,UACjBc,OAAQ,QACR1B,MAAO,UAGT,kBAAC,EAAD,QCTN2B,IAASC,OACN,kBAAC,EAAD,MACDC,SAASC,eAAe,U","file":"static/js/main.387dec2f.chunk.js","sourcesContent":["import React, { useRef, useState, Fragment } from 'react'\n\nconst dummyTestText = 'bacon ipsum dolor amet hamburger pork chop tongue meatball turkey swine tenderloin ham bresaola capicola chislic ham hock biltong cupim jowl picanha brisket turducken pork chop filet'\n\ntype CharState = 'yay' | 'nay' | 'empty'\n\nconst yayColor = '#c7b798'\nconst nayColor = '#f56c42'\nconst emptyColor = '#808080'\n\nfunction Typer() {\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const [typedText, setTypedText] = useState('')\n  const [isFocused, setIsFocused] = useState(false)\n\n  const focusInput = () => {\n    if (inputRef && inputRef.current) inputRef.current.focus()\n  }\n\n  const charState = (index: number): CharState => {\n    if (typedText[index]) {\n      const isEq = typedText.charCodeAt(index) === dummyTestText.charCodeAt(index)\n      return isEq ? 'yay' : 'nay'\n    }\n    return 'empty'\n  }\n\n  const isSpaceChar = (char: string) => char.charCodeAt(0) === 32\n\n  const charColor = (state: CharState) => {\n    switch (state) {\n      case 'yay':\n        return yayColor\n      case 'nay':\n        return nayColor\n      default:\n        return emptyColor\n    }\n  }\n\n  return (\n    <Fragment>\n      <div\n        onClick={focusInput}\n        style={{\n          maxWidth: 720,\n          fontSize: 'calc(10px + 2vmin)',\n          fontFamily: 'monospace, monospace',\n          textAlign: 'center',\n          wordSpacing: '0.25rem',\n          letterSpacing: '-0.25rem'\n        }}\n      >\n        {dummyTestText.split('').map((char: string, index: number) => {\n          const state = charState(index)\n          const color = charColor(state)\n          const isNaySpace = isSpaceChar(char) && state === 'nay'\n          const isLastTypedChar = index === typedText.length - 1\n          const isTypedEmpty = typedText.length === 0\n\n          const borderStyle = isFocused ? {\n            borderLeft: `solid 2px ${isTypedEmpty && index === 0 ? yayColor : 'transparent'}`,\n            borderRight: `solid 2px ${isLastTypedChar && !isTypedEmpty ? yayColor : 'transparent'}`,\n            borderRadius: isLastTypedChar || isTypedEmpty ? 0 : 8\n          } : {\n            borderLeft: 'solid 2px transparent',\n            borderRight: 'solid 2px transparent'\n          }\n\n          return (\n            <span\n              key={index}\n              style={{\n                color,\n                backgroundColor: isNaySpace ? nayColor : 'transparent',\n                ...borderStyle\n              }}\n            >\n              {char}\n            </span>\n          )\n        })}\n      </div>\n      <input\n        ref={inputRef}\n        onChange={(ev) => setTypedText(ev.target.value)}\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => setIsFocused(false)}\n        style={{\n          position: 'absolute',\n          top: '-999999px',\n          left: '-999999px'\n        }}\n      />\n    </Fragment>\n  )\n}\n\nexport default Typer\n","import React from 'react'\nimport Typer from './components/Typer'\n\nfunction App() {\n  return (\n    <main\n      style={{\n        display: 'grid',\n        placeItems: 'center',\n        backgroundColor: '#282d33',\n        height: '100vh',\n        color: 'white'\n      }}\n    >\n      <Typer />\n    </main>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  (<App />),\n  document.getElementById('root')\n)\n\n\n"],"sourceRoot":""}