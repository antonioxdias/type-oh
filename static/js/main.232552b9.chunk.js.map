{"version":3,"sources":["components/Typer.tsx","lib/utils.ts","components/index.ts","components/ModeSwitcher.tsx","components/Title.tsx","lib/useWords.tsx","App.tsx","index.tsx"],"names":["charState","typedText","testText","index","charCodeAt","isSpaceChar","char","charColor","state","ModeSwitcher","mode","setMode","isRunning","style","height","marginBottom","value","onChange","ev","target","backgroundColor","color","border","Title","margin","Typer","onStart","onFinish","latestWPM","inputRef","useRef","useState","setTypedText","isFocused","setIsFocused","useEffect","length","blurInput","focusOnEnterDown","keyCode","focusInput","document","addEventListener","removeEventListener","current","focus","blur","onClick","position","maxWidth","fontSize","textAlign","wordSpacing","split","map","isNaySpace","isLastTypedChar","isTypedEmpty","borderStyle","borderLeft","borderRight","borderRadius","key","top","left","width","display","placeItems","opacity","verticalAlign","cursor","pointerEvents","ref","onFocus","onBlur","charsDictionary","useWords","amount","testMode","words","setWords","a","fetch","then","response","json","data","catch","e","console","log","fetchWords","chars","w","word","i","Math","floor","random","push","generateChars","join","App","setIsRunning","startTime","setStartTime","wpm","setWPM","calcWPM","endTime","round","flexDirection","alignItems","Date","now","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.232552b9.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect, Fragment } from 'react'\nimport { CharState } from '../lib/types'\nimport { backgroundColor, yayColor, nayColor, emptyColor } from '../lib/utils'\n\nexport function Typer({ testText, isRunning, onStart, onFinish, latestWPM }: {\n  testText: string\n  isRunning: boolean\n  onStart: () => void\n  onFinish: (typedText: string) => void\n  latestWPM: number | null\n}) {\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const [typedText, setTypedText] = useState('')\n  const [isFocused, setIsFocused] = useState(false)\n\n  useEffect(() => {\n    if (testText === '') return\n    if (typedText.length === testText.length && isRunning) {\n      onFinish(typedText)\n      blurInput()\n    }\n  }, [typedText, testText, isRunning, onFinish])\n\n  useEffect(() => setTypedText(''), [testText])\n\n  useEffect(() => {\n    const focusOnEnterDown = (ev: KeyboardEvent) => {\n      if (ev.keyCode === 13 && !isFocused) focusInput()\n    }\n    document.addEventListener('keydown', focusOnEnterDown)\n    return () => {\n      document.removeEventListener('keydown', focusOnEnterDown)\n    }\n  }, [isFocused])\n\n  const focusInput = () => {\n    if (inputRef && inputRef.current) inputRef.current.focus()\n  }\n\n  const blurInput = () => {\n    if (inputRef && inputRef.current) inputRef.current.blur()\n  }\n  \n  const onInputChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    if (!isRunning) onStart()\n    setTypedText(ev.target.value)\n  }\n\n  if (!testText) return null\n\n  return (\n    <Fragment>\n      <div\n        onClick={focusInput}\n        style={{\n          position: 'relative',\n          maxWidth: 720,\n          fontSize: 'calc(10px + 2vmin)',\n          textAlign: 'center',\n          wordSpacing: '0.25rem'\n        }}\n      >\n        {testText.split('').map((char: string, index: number) => {\n          const state = charState(typedText, testText, index)\n          const color = charColor(state)\n          const isNaySpace = isSpaceChar(char) && state === 'nay'\n          const isLastTypedChar = index === typedText.length - 1\n          const isTypedEmpty = typedText.length === 0\n\n          const borderStyle = isFocused ? {\n            borderLeft: isTypedEmpty && index === 0 ? `solid 2px ${yayColor}` : 'none',\n            borderRight: `solid 2px ${isLastTypedChar && !isTypedEmpty ? yayColor : '#282d33'}`,\n            borderRadius: isLastTypedChar || isTypedEmpty ? 0 : 8\n          } : {\n            borderRight: 'solid 2px transparent',\n            borderLeft: isTypedEmpty && index === 0 ? `solid 2px transparent` : 'none',\n            borderRadius: 8\n          }\n\n          return (\n            <span\n              key={index}\n              style={{\n                color,\n                backgroundColor: isNaySpace ? nayColor : 'transparent',\n                ...borderStyle\n              }}\n            >\n              {char}\n            </span>\n          )\n        })}\n        {\n          !isFocused && (\n            <div\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                display: 'grid',\n                placeItems: 'center',\n                backgroundColor,\n                opacity: 0.8,\n                verticalAlign: 'center',\n                cursor: 'pointer'\n              }}\n            >\n              Click here to start typing! (or press Enter)\n            </div>\n          )\n        }\n        {\n          !isFocused && latestWPM && (\n            <div\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                display: 'grid',\n                placeItems: 'center',\n                backgroundColor,\n                color: yayColor,\n                fontSize: 24,\n                pointerEvents: 'none' \n              }}\n            >\n              {latestWPM}\n            </div>\n          )\n        }\n      </div>\n      <input\n        ref={inputRef}\n        value={typedText}\n        onChange={onInputChange}\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => setIsFocused(false)}\n        style={{\n          position: 'absolute',\n          top: '-999999px',\n          left: '-999999px'\n        }}\n      />\n    </Fragment>\n  )\n}\n\nconst charState = (typedText: string, testText: string, index: number): CharState => {\n  if (typedText[index]) {\n    const isEq = typedText.charCodeAt(index) === testText.charCodeAt(index)\n    return isEq ? 'yay' : 'nay'\n  }\n  return 'empty'\n}\n\nconst isSpaceChar = (char: string) => char.charCodeAt(0) === 32\n\nconst charColor = (state: CharState) => {\n  switch (state) {\n    case 'yay':\n      return yayColor\n    case 'nay':\n      return nayColor\n    default:\n      return emptyColor\n  }\n}\n","export const backgroundColor = '#282d33'\nexport const yayColor = '#c7b798'\nexport const nayColor = '#f56c42'\nexport const emptyColor = '#808080'","import { ModeSwitcher as ModeSwitcherImport } from './ModeSwitcher'\nimport { Title as TitleImport } from './Title'\nimport { Typer as TyperImport } from './Typer'\n\nexport const ModeSwitcher = ModeSwitcherImport\nexport const Title = TitleImport\nexport const Typer = TyperImport\n","import React from 'react'\nimport { TestMode } from '../lib/types'\nimport { backgroundColor } from '../lib/utils'\n\nexport const ModeSwitcher = ({ mode, setMode, isRunning }: {\n  mode: TestMode\n  setMode: (mode: TestMode) => void\n  isRunning: boolean\n}) => (\n  <div\n    style={{\n      height: 24,\n      marginBottom: 32\n    }}\n  >\n  {!isRunning && <select\n      value={mode}\n      onChange={ev => setMode(ev.target.value as TestMode)}\n      style={{\n        backgroundColor,\n        color: 'white',\n        border: 'none'\n      }}\n    >\n      <option value={'words'}>words</option>\n      <option value={'chars'}>chars</option>\n    </select>}\n  </div>\n)\n","import React from 'react'\n\nexport const Title = () => (\n  <h1\n    style={{\n      margin: '4rem'\n    }}\n  >\n    Type-OH\n  </h1>\n)\n","import { useState, useEffect } from 'react'\nimport { TestMode } from '../lib/types'\n\nconst charsDictionary = 'qwertyuiopasdfghjkl;zxcvbnm,.-QWERTYUIOPASDFGHJKL:ZXCVBNM<>_()|!@#$%&/\\'\"*{}[]^~`]\\\\?=+1234567890'\nconst charWordLength = 5\n\nconst generateChars = (amount: number) => {\n  let chars: string[] = []\n\n  for (let w = 0; w < amount; w++) {\n    let word = ''\n    for (let i = 0; i < charWordLength; i++) {\n      const index = Math.floor(Math.random() * charsDictionary.length)\n      word += charsDictionary[index]\n    }\n    chars.push(word)\n  }\n\n  return chars\n}\n\nconst useWords = (amount: number, testMode: TestMode, isRunning: boolean) => {\n  const [words, setWords] = useState<string[]>([])\n\n  useEffect(() => {\n    const fetchWords = async () => {\n      await fetch(`https://random-word-api.herokuapp.com/word?number=${amount}`)\n        .then(response => response.json())\n        .then(data => {\n          setWords(data)\n        })\n        .catch(e => {\n          console.log(e)\n          setWords('failed to retreive words'.split(' '))\n        })\n    }\n\n    if (!isRunning) {\n      if (testMode === 'words' && !isRunning) fetchWords()\n\n      if (testMode === 'chars' && !isRunning) {\n        setWords(generateChars(amount))\n      }\n    }\n\n  }, [amount, testMode, isRunning])\n\n  return words.join(' ')\n}\n\nexport default useWords\n\n","import React, { useState, Fragment } from 'react'\nimport { ModeSwitcher, Title, Typer } from './components'\nimport { TestMode } from './lib/types'\nimport useWords from './lib/useWords'\nimport { backgroundColor } from './lib/utils'\n\nconst wordCount = 15\n\nfunction App() {\n  const [mode, setMode] = useState<TestMode>('words')\n  const [isRunning, setIsRunning] = useState(false)\n  const [startTime, setStartTime] = useState<number | null>(null)\n  const [wpm, setWPM] = useState<number | null>(null)\n  const words = useWords(wordCount, mode, isRunning)\n\n  const onRunStart = () => {\n    setIsRunning(true)\n    setStartTime(Date.now())\n  }\n\n  const onRunFinish = (typedText: string) => {\n    console.log(typedText)\n    setIsRunning(false)\n    setWPM(calcWPM(Date.now()))\n    setStartTime(null)\n  }\n\n  const calcWPM = (endTime: number): number => {\n    if (!startTime) return 0\n    return Math.round(wordCount / ((endTime - startTime) / 60000))\n  }\n\n  return (\n    <Fragment>\n      <main\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          backgroundColor,\n          height: '100vh',\n          color: 'white'\n        }}\n      >\n        <Title />\n        <ModeSwitcher\n          mode={mode}\n          setMode={setMode}\n          isRunning={isRunning}\n        />\n        <Typer\n          testText={words}\n          isRunning={isRunning}\n          onStart={onRunStart}\n          onFinish={onRunFinish}\n          latestWPM={wpm}\n        />\n      </main>\n    </Fragment>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  (<App />),\n  document.getElementById('root')\n)\n\n\n"],"sourceRoot":""}