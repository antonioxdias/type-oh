{"version":3,"sources":["components/Typer.tsx","lib/utils.ts","components/index.ts","components/Title.tsx","lib/useWords.tsx","lib/useChars.tsx","App.tsx","index.tsx"],"names":["charState","typedText","testText","index","charCodeAt","isSpaceChar","char","charColor","state","Title","style","margin","Typer","isRunning","onStart","onFinish","showWPM","latestWPM","inputRef","useRef","useState","setTypedText","isFocused","setIsFocused","useEffect","length","blurInput","focusOnEnterDown","ev","keyCode","focusInput","document","addEventListener","removeEventListener","current","focus","blur","onClick","position","maxWidth","fontSize","textAlign","wordSpacing","split","map","color","isNaySpace","isLastTypedChar","isTypedEmpty","borderStyle","borderLeft","borderRight","borderRadius","key","backgroundColor","top","left","width","height","display","placeItems","opacity","verticalAlign","cursor","pointerEvents","ref","value","onChange","target","onFocus","onBlur","useWords","amount","testMode","words","setWords","a","fetch","then","response","json","data","catch","e","console","log","fetchWords","join","charsDictionary","useChars","chars","setChars","i","Math","floor","random","generateChars","App","mode","setIsRunning","setResultText","startTime","setStartTime","wpm","setWPM","symbols","calcWPM","endTime","round","flexDirection","alignItems","Date","now","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c75ffcef.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect, Fragment } from 'react'\nimport { CharState } from '../lib/types'\nimport { backgroundColor, yayColor, nayColor, emptyColor } from '../lib/utils'\n\nexport function Typer({ testText, isRunning, onStart, onFinish, showWPM, latestWPM }: {\n  testText: string\n  isRunning: boolean\n  onStart: () => void\n  onFinish: (typedText: string) => void\n  showWPM: boolean\n  latestWPM: number | null\n}) {\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const [typedText, setTypedText] = useState('')\n  const [isFocused, setIsFocused] = useState(false)\n\n  useEffect(() => {\n    if (testText === '') return\n    if (typedText.length === testText.length && isRunning) {\n      onFinish(typedText)\n      blurInput()\n    }\n  }, [typedText, testText, isRunning, onFinish])\n\n  useEffect(() => setTypedText(''), [testText])\n\n  useEffect(() => {\n    const focusOnEnterDown = (ev: KeyboardEvent) => {\n      if (ev.keyCode === 13 && !isFocused) focusInput()\n    }\n    document.addEventListener('keydown', focusOnEnterDown)\n    return () => {\n      document.removeEventListener('keydown', focusOnEnterDown)\n    }\n  }, [])\n\n  const focusInput = () => {\n    if (inputRef && inputRef.current) inputRef.current.focus()\n  }\n\n  const blurInput = () => {\n    if (inputRef && inputRef.current) inputRef.current.blur()\n  }\n  \n  const onInputChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    if (!isRunning) onStart()\n    setTypedText(ev.target.value)\n  }\n\n  if (!testText) return null\n\n  return (\n    <Fragment>\n      <div\n        onClick={focusInput}\n        style={{\n          position: 'relative',\n          maxWidth: 720,\n          fontSize: 'calc(10px + 2vmin)',\n          textAlign: 'center',\n          wordSpacing: '0.25rem'\n        }}\n      >\n        {testText.split('').map((char: string, index: number) => {\n          const state = charState(typedText, testText, index)\n          const color = charColor(state)\n          const isNaySpace = isSpaceChar(char) && state === 'nay'\n          const isLastTypedChar = index === typedText.length - 1\n          const isTypedEmpty = typedText.length === 0\n\n          const borderStyle = isFocused ? {\n            borderLeft: isTypedEmpty && index === 0 ? `solid 2px ${yayColor}` : 'none',\n            borderRight: `solid 2px ${isLastTypedChar && !isTypedEmpty ? yayColor : '#282d33'}`,\n            borderRadius: isLastTypedChar || isTypedEmpty ? 0 : 8\n          } : {\n            borderRight: 'solid 2px transparent',\n            borderLeft: isTypedEmpty && index === 0 ? `solid 2px transparent` : 'none',\n            borderRadius: 8\n          }\n\n          return (\n            <span\n              key={index}\n              style={{\n                color,\n                backgroundColor: isNaySpace ? nayColor : 'transparent',\n                ...borderStyle\n              }}\n            >\n              {char}\n            </span>\n          )\n        })}\n        {\n          !isFocused && (\n            <div\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                display: 'grid',\n                placeItems: 'center',\n                backgroundColor,\n                opacity: 0.8,\n                verticalAlign: 'center',\n                cursor: 'pointer'\n              }}\n            >\n              Click here to start typing! (or press Enter)\n            </div>\n          )\n        }\n        {\n          !isFocused && showWPM && latestWPM && (\n            <div\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                display: 'grid',\n                placeItems: 'center',\n                backgroundColor,\n                color: yayColor,\n                fontSize: 24,\n                pointerEvents: 'none' \n              }}\n            >\n              {latestWPM}\n            </div>\n          )\n        }\n      </div>\n      <input\n        ref={inputRef}\n        value={typedText}\n        onChange={onInputChange}\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => setIsFocused(false)}\n        style={{\n          position: 'absolute',\n          top: '-999999px',\n          left: '-999999px'\n        }}\n      />\n    </Fragment>\n  )\n}\n\nconst charState = (typedText: string, testText: string, index: number): CharState => {\n  if (typedText[index]) {\n    const isEq = typedText.charCodeAt(index) === testText.charCodeAt(index)\n    return isEq ? 'yay' : 'nay'\n  }\n  return 'empty'\n}\n\nconst isSpaceChar = (char: string) => char.charCodeAt(0) === 32\n\nconst charColor = (state: CharState) => {\n  switch (state) {\n    case 'yay':\n      return yayColor\n    case 'nay':\n      return nayColor\n    default:\n      return emptyColor\n  }\n}\n","export const backgroundColor = '#282d33'\nexport const yayColor = '#c7b798'\nexport const nayColor = '#f56c42'\nexport const emptyColor = '#808080'","import { Title as TitleImport } from './Title'\nimport { Typer as TyperImport } from './Typer'\n\nexport const Title = TitleImport\nexport const Typer = TyperImport\n","import React from 'react'\n\nexport const Title = () => (\n  <h1\n    style={{\n      margin: '4rem'\n    }}\n  >\n    Type-OH\n  </h1>\n)\n","import { useState, useEffect } from 'react'\nimport { TestMode } from '../lib/types'\n\nconst useWords = (amount: number, testMode: TestMode, isRunning: boolean) => {\n  const [words, setWords] = useState<string[]>([])\n\n  useEffect(() => {\n    const fetchWords = async () => {\n      await fetch(`https://random-word-api.herokuapp.com/word?number=${amount}`)\n        .then(response => response.json())\n        .then(data => {\n          setWords(data)\n        })\n        .catch(e => {\n          console.log(e)\n          setWords('failed to retreive words'.split(' '))\n        })\n    }\n\n    if (testMode === 'words' && !isRunning) fetchWords()\n  }, [amount, testMode, isRunning])\n\n  return words.join(' ')\n}\n\nexport default useWords\n\n","import { useState, useEffect } from 'react'\nimport { TestMode } from './types'\n\nconst charsDictionary = 'qwertyuiopasdfghjkl;zxcvbnm,.-QWERTYUIOPASDFGHJKL:ZXCVBNM<>_()|!@#$%&/\\'\"*{}[]^~`]\\\\?=+1234567890 '\n\nconst generateChars = (amount: number) => {\n  let chars = ''\n\n  for (let i = 0; i < amount ; i++) {\n    const index = Math.floor(Math.random() * charsDictionary.length)\n    chars += charsDictionary[index]\n  }\n  \n  return chars\n}\n\nconst useChars = (amount: number, testMode: TestMode, isRunning: boolean) => {\n  const [chars, setChars] = useState('')\n\n  useEffect(() => {\n    if (testMode === 'chars' && !isRunning) {\n      setChars(generateChars(amount))\n    }\n  }, [amount, testMode, isRunning])\n\n  return chars\n}\n\nexport default useChars\n","import React, { useState, Fragment } from 'react'\nimport { Title, Typer } from './components'\nimport { TestMode } from './lib/types'\nimport useWords from './lib/useWords'\nimport useChars from './lib/useChars'\nimport { backgroundColor } from './lib/utils'\n\nconst wordCount = 5\nconst symbolsCount = 40\nconst showWPM = false\n\nfunction App() {\n  const [mode, setMode] = useState<TestMode>('chars')\n  const [isRunning, setIsRunning] = useState(false)\n  const [resultText, setResultText] = useState('')\n  const [startTime, setStartTime] = useState<number | null>(null)\n  const [wpm, setWPM] = useState<number | null>(null)\n  const words = useWords(wordCount, mode, isRunning)\n  const symbols = useChars(symbolsCount, mode, isRunning)\n\n  const onRunStart = () => {\n    setIsRunning(true)\n    setStartTime(Date.now())\n  }\n\n  const onRunFinish = (typedText: string) => {\n    setResultText(typedText)\n    setIsRunning(false)\n    setWPM(calcWPM(Date.now()))\n    setStartTime(null)\n  }\n\n  const calcWPM = (endTime: number): number => {\n    if (!startTime) return 0\n    return Math.round(wordCount / ((endTime - startTime) / 60000))\n  }\n\n  return (\n    <Fragment>\n      <main\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          backgroundColor,\n          height: '100vh',\n          color: 'white'\n        }}\n      >\n        <Title />\n        <Typer\n          testText={mode === 'words' ? words : symbols}\n          isRunning={isRunning}\n          onStart={onRunStart}\n          onFinish={onRunFinish}\n          showWPM={showWPM}\n          latestWPM={wpm}\n        />\n      </main>\n    </Fragment>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  (<App />),\n  document.getElementById('root')\n)\n\n\n"],"sourceRoot":""}